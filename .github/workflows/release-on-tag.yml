name: Build & Release on Tag

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Існуючий тег (vX.Y.Z). Порожньо => візьме останній."
        required: false

permissions:
  contents: write

jobs:
  build_windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine tag (push or manual)
        id: picktag
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            git fetch --tags --force
            if [ -n "${{ github.event.inputs.tag }}" ]; then
              TAG="${{ github.event.inputs.tag }}"
            else
              TAG=$(git describe --tags "$(git rev-list --tags --max-count=1)")
            fi
          else
            TAG="${GITHUB_REF_NAME}"
          fi
          echo "Using tag: $TAG"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          git checkout "$TAG"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          $ProgressPreference = 'SilentlyContinue'

          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install --upgrade nuitka ordered-set zstandard

          python -m nuitka --version

      - name: Verify version matches tag
        id: ver
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'

          $tag = "${{ steps.picktag.outputs.tag }}"      
          $tagNoV = $tag.TrimStart('v')

          $match = Select-String -Path SteamAchievementLocalizer.py -Pattern 'APP_VERSION *= *"([0-9]+\.[0-9]+\.[0-9]+)"' | Select-Object -First 1
          if (-not $match) {
            Write-Error "APP_VERSION not found in SteamAchievementLocalizer.py"
          }
          $srcVersion = $match.Matches[0].Groups[1].Value
          Write-Host "Source version: $srcVersion | Tag version: $tagNoV"

          if ($srcVersion -ne $tagNoV) {
            Write-Error "ERROR: APP_VERSION ($srcVersion) != tag ($tagNoV)"
          }

          "app_version=$srcVersion" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Build (Nuitka onefile)
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          $ProgressPreference = 'SilentlyContinue'

          # Чистимо минулі артефакти
          Remove-Item dist, build -Recurse -Force -ErrorAction SilentlyContinue
          Get-ChildItem -Filter '*.build' | Remove-Item -Force -ErrorAction SilentlyContinue

          python -m nuitka SteamAchievementLocalizer.py --onefile `
            --remove-output `
            --output-dir=dist `
            --windows-console-mode=disable `
            --plugin-enable=pyqt6 `
            --windows-icon-from-ico=assets/icon.ico `
            --include-data-files=assets/icon.ico=assets/icon.ico `
            --include-data-files=assets/locales/lang_en.json=assets/locales/lang_en.json `
            --include-data-files=assets/locales/lang_ua.json=assets/locales/lang_ua.json `
            --include-data-files=assets/locales/lang_pl.json=assets/locales/lang_pl.json `
            --assume-yes-for-downloads `
            --show-progress

          Write-Host "Listing dist/:"
          Get-ChildItem dist | Format-Table -AutoSize

      - name: Rename artifact
        id: artifact
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'

          $version = "${{ steps.ver.outputs.app_version }}"
          if (-not (Test-Path dist)) {
            Write-Error "dist directory not found"
          }

          $raw = Get-ChildItem dist -Filter *.exe -File | Select-Object -First 1
          if (-not $raw) {
            Write-Error "No exe produced"
          }

          $newName = "SteamAchievementLocalizer-v$version-win64.exe"
          Rename-Item -Path $raw.FullName -NewName $newName

          $fullPath = Join-Path dist $newName
          Write-Host "Renamed $($raw.Name) -> $newName"

          "file=$fullPath"       | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "artifact_name=$newName" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Generate release notes
        id: notes
        shell: powershell
        run: |
          $version = "${{ steps.ver.outputs.app_version }}"
          $notesContent = @"
          ## Steam Achievement Localizer v$version

          ### Downloads
          - **Windows**: SteamAchievementLocalizer-v$version-win64.exe
          - **Linux (Portable)**: SteamAchievementLocalizer-v$version-linux64.tar.gz  
          - **Linux (Binary)**: SteamAchievementLocalizer-v$version-linux64

          ### Installation
          **Windows**: Download and run the .exe file

          **Linux**: 
          - For portable version: Extract tar.gz and run `./run.sh`
          - For binary: Download, make executable with `chmod +x`, and run

          ### Requirements
          - **Windows**: Windows 10 or later
          - **Linux**: Modern Linux distribution with Qt6 support
          "@

          $notesContent | Out-File -FilePath "release-notes.md" -Encoding UTF8
          "notes_file=release-notes.md" | Out-File -FilePath $env:GITHUB_OUTPUT -Append


      - name: Upload artifact (CI record)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.artifact_name }}
          path: ${{ steps.artifact.outputs.file }}

      - name: Create or Update Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          TAG="${{ steps.picktag.outputs.tag }}"
          TITLE="Steam Achievement Localizer by Pan_Vena v${{ steps.ver.outputs.app_version }}"
          ASSET="${{ steps.artifact.outputs.file }}"
          NOTES_FILE="${{ steps.notes.outputs.notes_file }}"
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Release exists, updating..."
            gh release upload "$TAG" "$ASSET" --clobber
            gh release edit "$TAG" --title "$TITLE" --notes-file "$NOTES_FILE"
          else
            gh release create "$TAG" "$ASSET" --title "$TITLE" --notes-file "$NOTES_FILE"
          fi

  build_linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine tag (push or manual)
        id: picktag
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            git fetch --tags --force
            if [ -n "${{ github.event.inputs.tag }}" ]; then
              TAG="${{ github.event.inputs.tag }}"
            else
              TAG=$(git describe --tags "$(git rev-list --tags --max-count=1)")
            fi
          else
            TAG="${GITHUB_REF_NAME}"
          fi
          echo "Using tag: $TAG"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          git checkout "$TAG"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          # Install essential packages, continue on failure for optional ones
          sudo apt-get install -y \
            xvfb \
            libgl1-mesa-dev \
            libglib2.0-0 \
            libfontconfig1 \
            libx11-6 \
            libxext6 \
            libxrender1 \
            libxkbcommon0 \
            libxkbcommon-x11-0
            
          # Try different versions of packages that might have different names
          sudo apt-get install -y libegl1 || sudo apt-get install -y libegl1-mesa || true
          sudo apt-get install -y libasound2t64 || sudo apt-get install -y libasound2 || true

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          # Install PyQt6 and other dependencies
          python -m pip install -r requirements.txt
          python -m pip install --upgrade nuitka ordered-set zstandard
          # Verify PyQt6 installation
          python -c "import PyQt6; print('PyQt6 successfully imported')"
          # List installed Qt libraries for debugging
          python -c "from PyQt6 import QtCore; print(f'Qt version: {QtCore.QT_VERSION_STR}')"

      - name: Verify version matches tag
        id: ver
        run: |
          tag="${{ steps.picktag.outputs.tag }}"      
          tagNoV=${tag#v}

          srcVersion=$(grep -oP 'APP_VERSION *= *"\K[0-9]+\.[0-9]+\.[0-9]+' SteamAchievementLocalizer.py)
          echo "Source version: $srcVersion | Tag version: $tagNoV"

          if [ "$srcVersion" != "$tagNoV" ]; then
            echo "ERROR: APP_VERSION ($srcVersion) != tag ($tagNoV)"
            exit 1
          fi

          echo "app_version=$srcVersion" >> "$GITHUB_OUTPUT"

      - name: Build Nuitka binary
        run: |
          # Clean previous artifacts
          rm -rf dist build *.build

          # Start virtual display for GUI applications
          export DISPLAY=:99
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          sleep 3

          python -m nuitka SteamAchievementLocalizer.py --onefile \
            --remove-output \
            --output-dir=dist \
            --plugin-enable=pyqt6 \
            --include-data-files=assets/icon.ico=assets/icon.ico \
            --include-data-files=assets/locales/lang_en.json=assets/locales/lang_en.json \
            --include-data-files=assets/locales/lang_ua.json=assets/locales/lang_ua.json \
            --include-data-files=assets/locales/lang_pl.json=assets/locales/lang_pl.json \
            --assume-yes-for-downloads \
            --show-progress

          echo "Listing dist/:"
          ls -la dist/

      - name: Create portable archive and tar.gz
        id: artifact
        run: |
          version="${{ steps.ver.outputs.app_version }}"
          
          # Find the binary
          binary=$(find dist -name "SteamAchievementLocalizer*" -executable -type f | head -n1)
          if [ -z "$binary" ]; then
            echo "No binary found"
            exit 1
          fi
          
          # Create portable directory
          portable_dir="SteamAchievementLocalizer-v${version}-linux64-portable"
          mkdir -p "$portable_dir"
          
          # Copy binary and assets
          cp "$binary" "$portable_dir/SteamAchievementLocalizer"
          chmod +x "$portable_dir/SteamAchievementLocalizer"
          cp -r assets "$portable_dir/"
          cp README.md "$portable_dir/" 2>/dev/null || true
          cp LICENSE "$portable_dir/" 2>/dev/null || true
          
          # Create run script
          cat > "$portable_dir/run.sh" << 'EOF'
          #!/bin/bash
          DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
          cd "$DIR"
          ./SteamAchievementLocalizer "$@"
          EOF
          chmod +x "$portable_dir/run.sh"
          
          # Create tar.gz
          tar_name="SteamAchievementLocalizer-v${version}-linux64.tar.gz"
          tar -czf "$tar_name" "$portable_dir"
          
          # Rename binary for direct download
          binary_name="SteamAchievementLocalizer-v${version}-linux64"
          cp "$binary" "$binary_name"
          
          echo "portable_archive=$tar_name" >> "$GITHUB_OUTPUT"
          echo "binary_file=$binary_name" >> "$GITHUB_OUTPUT"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-builds-v${{ steps.ver.outputs.app_version }}
          path: |
            ${{ steps.artifact.outputs.portable_archive }}
            ${{ steps.artifact.outputs.binary_file }}

      - name: Upload to release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ steps.picktag.outputs.tag }}"
          
          # Wait for Windows job to create release if needed
          sleep 30
          
          # Upload both files
          gh release upload "$TAG" "${{ steps.artifact.outputs.portable_archive }}" --clobber
          gh release upload "$TAG" "${{ steps.artifact.outputs.binary_file }}" --clobber
